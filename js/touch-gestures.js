// ========== TOUCH GESTURES ========== //

class TouchGestures {
  constructor() {
    this.startX = 0;
    this.startY = 0;
    this.currentX = 0;
    this.currentY = 0;
    this.isDragging = false;
    this.swipeThreshold = 100; // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è swipe
    this.velocityThreshold = 0.3; // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    this.activeElement = null;
    this.startTime = 0;
    
    this.init();
  }

  init() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if ('ontouchstart' in window) {
      this.addTouchListeners();
    }
    
    // –°—Ç–∏–ª–∏ —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º CSS —Ñ–∞–π–ª–µ
  }

  addTouchListeners() {
    document.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: false });
    document.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });
    document.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: false });
    document.addEventListener('touchcancel', this.handleTouchCancel.bind(this), { passive: false });
  }

  handleTouchStart(e) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    const transactionItem = e.target.closest('.transaction-item');
    if (!transactionItem) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    if (e.target.closest('.transaction-actions')) return;

    this.activeElement = transactionItem;
    this.startX = e.touches[0].clientX;
    this.startY = e.touches[0].clientY;
    this.startTime = Date.now();
    this.isDragging = false;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è transition
    transactionItem.classList.add('swiping');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    this.createDeleteIndicator(transactionItem);
  }

  handleTouchMove(e) {
    if (!this.activeElement) return;

    this.currentX = e.touches[0].clientX;
    this.currentY = e.touches[0].clientY;

    const deltaX = this.currentX - this.startX;
    const deltaY = this.currentY - this.startY;

    // –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ - —ç—Ç–æ —Å–∫—Ä–æ–ª–ª
    if (Math.abs(deltaY) > Math.abs(deltaX) && Math.abs(deltaY) > 10) {
      this.resetSwipe();
      return;
    }

    // –ï—Å–ª–∏ –Ω–∞—á–∞–ª–∏ –¥–≤–∏–≥–∞—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
    if (Math.abs(deltaX) > 10) {
      this.isDragging = true;
      e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤–ª–µ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      const translateX = Math.min(0, deltaX);
      
      this.activeElement.style.transform = `translateX(${translateX}px)`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è
      const indicator = this.activeElement.querySelector('.swipe-delete-indicator');
      if (indicator) {
        const opacity = Math.min(1, Math.abs(translateX) / this.swipeThreshold);
        indicator.style.opacity = opacity;
      }

      // Haptic feedback –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
      if (Math.abs(deltaX) > this.swipeThreshold && !this.activeElement.classList.contains('haptic-feedback')) {
        this.triggerHapticFeedback();
      }
    }
  }

  handleTouchEnd(e) {
    if (!this.activeElement || !this.isDragging) {
      this.resetSwipe();
      return;
    }

    const deltaX = this.currentX - this.startX;
    const deltaTime = Date.now() - this.startTime;
    const velocity = Math.abs(deltaX) / deltaTime;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const shouldDelete = Math.abs(deltaX) > this.swipeThreshold || velocity > this.velocityThreshold;
    
    if (shouldDelete && deltaX < 0) {
      this.deleteTransaction();
    } else {
      this.resetSwipe();
    }
  }

  handleTouchCancel(e) {
    this.resetSwipe();
  }

  createDeleteIndicator(element) {
    const existing = element.querySelector('.swipe-delete-indicator');
    if (existing) return;

    const indicator = document.createElement('div');
    indicator.className = 'swipe-delete-indicator';
    indicator.innerHTML = 'üóëÔ∏è';
    element.appendChild(indicator);
  }

  triggerHapticFeedback() {
    if (!this.activeElement) return;
    
    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    this.activeElement.classList.add('haptic-feedback');
    setTimeout(() => {
      this.activeElement?.classList.remove('haptic-feedback');
    }, 100);

    // Haptic API –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if ('vibrate' in navigator) {
      navigator.vibrate(10);
    }
  }

  deleteTransaction() {
    if (!this.activeElement) return;

    const transactionId = this.activeElement.getAttribute('data-id');
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    this.activeElement.classList.remove('swiping');
    this.activeElement.classList.add('swipe-left');
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      if (transactionId && typeof deleteTransactionDirect === 'function') {
        deleteTransactionDirect(transactionId);
      }
      this.activeElement = null;
    }, 300);
  }

  resetSwipe() {
    if (!this.activeElement) return;

    this.activeElement.classList.remove('swiping');
    this.activeElement.style.transform = '';
    
    const indicator = this.activeElement.querySelector('.swipe-delete-indicator');
    if (indicator) {
      indicator.style.opacity = '0';
    }

    setTimeout(() => {
      this.activeElement = null;
      this.isDragging = false;
    }, 300);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∂–µ—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  new TouchGestures();
});

// ========== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ê–ù–ò–ú–ê–¶–ò–ò ========== //

// –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
function animateNewTransaction(element) {
  element.style.opacity = '0';
  element.style.transform = 'translateY(-20px) scale(0.95)';
  
  setTimeout(() => {
    element.style.transition = 'all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)';
    element.style.opacity = '1';
    element.style.transform = 'translateY(0) scale(1)';
  }, 50);
}

// –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
function animateRemoveTransaction(element, callback) {
  element.style.transition = 'all 0.3s ease';
  element.style.transform = 'translateX(-100%)';
  element.style.opacity = '0';
  element.style.height = '0';
  element.style.margin = '0';
  element.style.padding = '0';
  
  setTimeout(() => {
    if (callback) callback();
  }, 300);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
function animateBalanceUpdate(element) {
  element.classList.add('balance-update');
  setTimeout(() => {
    element.classList.remove('balance-update');
  }, 600);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π CSS —Ñ–∞–π–ª